const express = require("express");
const http = require("http");
const mongodb = require("mongodb");
const amqplib = require("amqplib");

if (!process.env.PORT) {
  throw new Error("Please specify the port number for the HTTP server with the environment variable PORT.");
}

if (!process.env.RABBIT) {
  throw new Error("Please specify the connection string for the RabbitMQ server with the environment variable RABBIT.");
}

const PORT = process.env.PORT;
const VIDEO_STORAGE_HOST = process.env.VIDEO_STORAGE_HOST;
const VIDEO_STORAGE_PORT = parseInt(process.env.VIDEO_STORAGE_PORT);
const DB_HOST = process.env.DB_HOST;
const DB_NAME = process.env.DB_NAME;
const RABBIT = process.env.RABBIT;

function sendViewedMessage(messagingChannel, videoPath) {
  const message = JSON.stringify({
    videoPath: videoPath
  });
  messagingChannel.publish("", "viewed", Buffer.from(message));
}

async function main() {
  const client = await mongodb.MongoClient.connect(DB_HOST);
  const db = client.db(DB_NAME);
  const videosCollection = db.collection("videos");
  const messagingConnection = await amqplib.connect(RABBIT);
  const messagingChannel = await messagingConnection.createChannel();
  const app = express();
  app.get("/video", async (req, res) => {
    const videoId = new mongodb.ObjectId(req.query.id);
    const videoRecord = await videosCollection.findOne({_id: videoId});
    if (!videoRecord) {
      res.sendStatus(404);
      return;
    }
    console.log(`Streaming video ${videoRecord.videoPath} from storage server ${VIDEO_STORAGE_HOST}:${VIDEO_STORAGE_PORT}.`);
    sendViewedMessage(messagingChannel, videoRecord.videoPath);
    const forwardRequest = http.request(
      {
        host: VIDEO_STORAGE_HOST,
        port: VIDEO_STORAGE_PORT,
        path:`/video?path=${videoRecord.videoPath}`,
        method: 'GET',
        headers: req.headers
      }, 
      forwardResponse => {
        res.writeHeader(forwardResponse.statusCode, forwardResponse.headers);
        forwardResponse.pipe(res);
      }
    );
    req.pipe(forwardRequest);
  });
   
  app.listen(PORT);
}

main().catch(error => {
  console.error("Failed to start Video Streaming Service");
  console.error(error && error.stack || error);
});
 
